import curry2 from "./internal/curry2";
import foldl from "./foldl";
import keys from "./keys";

/**
 * Map, but for objects. Creates an object with the same keys as `obj` and values
 * generated by running each property of `obj` through `fn`. `fn` is passed one argument:
 * *(value)*.
 *
 * @static
 * @memberOf R
 * @category List
 * @param {Array} fn A function called for each property in `obj`. Its return value will
 * become a new property on the return object.
 * @param {Object} obj The object to iterate over.
 * @return {Object} A new object with the same keys as `obj` and values that are the result
 * of running each property through `fn`.
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var double = function(num) {
 *        return num * 2;
 *      };
 *
 *      ramda.mapObj(double, values); //=> { x: 2, y: 4, z: 6 }
 */
// TODO: consider mapObj.key in parallel with mapObj.idx.  Also consider folding together with `map` implementation.
var mapObj = curry2(function _mapObject(fn, obj) {
    return foldl(function (acc, key) {
        acc[key] = fn(obj[key]);
        return acc;
    }, {}, keys(obj));
});

/**
 * Like `mapObj`, but but passes additional arguments to the predicate function. The
 * predicate function is passed three arguments: *(value, key, obj)*.
 *
 * @static
 * @memberOf R
 * @category List
 * @param {Array} fn A function called for each property in `obj`. Its return value will
 *        become a new property on the return object.
 * @param {Object} obj The object to iterate over.
 * @return {Object} A new object with the same keys as `obj` and values that are the result
 *         of running each property through `fn`.
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var double = function(num, key, obj) {
 *        return key + num;
 *      };
 *
 *      ramda.mapObj(double, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */
mapObj.idx = curry2(function mapObjectIdx(fn, obj) {
    return foldl(function (acc, key) {
        acc[key] = fn(obj[key], key, obj);
        return acc;
    }, {}, keys(obj));
});

export default mapObj;
